/*
 * LAB4_PART1.cpp
 *
 * Author : Jose
 */ 

/*	Author: Jose
 *  Partner(s) Name & E-mail: Bo Yang byang059@ucr.edu
 *	Lab Section: 24
 *	Assignment: Lab #4  Exercise #1
 *	Exercise Description: [optional - include for your own benefit]
 *	
 *	I acknowledge all content contained herein, excluding template or example
 *	code, is my own original work.
 */

#include <avr/io.h>

unsigned char clickButton=0;

enum Button_States { B_start, Release_state, Press_state } button_state;

void One_Button_System()
{
	switch( button_state)
	{
		case B_start:
		//clickButton=0;  // doesn't affect the logic at all, so block it
		PORTB=0x01;
		button_state=Release_state;
		break;
		
		case Release_state:
		if( PINA==0x00 ){
			// do nothing to stay in this state
			}else if ( PINA==0x01 ) {
			button_state=Press_state;
			//clickButton=(clickButton==0) ? 1 : 0;   // doesn't affect the logic at all, so block it
			PORTB=(PORTB==1) ? 2 : 1;
			}else {
			// do nothing to stay in this state
			// In case if PORTA has unexpected value such as 0x70
		}
		break;
		
		case Press_state:
		if( PINA==0x01 ){
			// do nothing to stay in this state
			}else if ( PINA==0x00 ) {
			button_state=Release_state;
			}else {
			// do nothing to stay in this state
			// In case if PORTA has unexpected value such as 0x70
		}
		break;
		
		default:			PORTB=0x03;  // turn on both LED lights to show unexpected situation
		break;
	}
}
int main(void)
{
	DDRA = 0x00; PORTA = 0xFF;
	DDRB = 0xFF; PORTB = 0x00;
	
	button_state=B_start;
	
	while (1)
	{
		One_Button_System();
	}
}

